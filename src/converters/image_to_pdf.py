import os
import math
from PIL import Image, ImageOps, ImageFilter
from fpdf import FPDF
from datetime import datetime

def convert_images_to_pdf(image_files_list, output_pdf_path, logger=None, config=None):
    """
    Chuyen doi danh sach anh thanh PDF khá»• ngang vá»›i 2 áº£nh má»—i trang
    Layout Ä'Æ°á»£c tá»'i Æ°u cho khá»• ngang vá»›i căn lá»• tùy chá»‰nh
    """
    try:
        # Khoi tao doi tuong PDF - LANDSCAPE
        pdf = FPDF(orientation='L', unit='mm', format='A4')  # L = Landscape
        pdf.set_auto_page_break(auto=False)
        
        # Metadata cho PDF
        try:
            pdf.set_title("Landscape PDF - Generated by Landscape PDF Generator")
            pdf.set_author("Landscape PDF Generator")
            pdf.set_creator("Python FPDF")
            if hasattr(pdf, 'set_creation_date'):
                pdf.set_creation_date(datetime.now())
        except AttributeError:
            pass
        
        # Lay cau hinh - LANDSCAPE SETTINGS VỚI CĂN LỀ TÙY CHỈNH
        if config:
            quality = config.getint('IMAGE_SETTINGS', 'jpeg_quality', fallback=90)
            page_width = 297  # mm (A4 landscape width)
            page_height = 210  # mm (A4 landscape height)
            
            # Lấy cấu hình căn lề tùy chỉnh
            margins = _get_margins_config(config)
            
            add_page_numbers = config.getboolean('OUTPUT', 'add_page_numbers', fallback=True)
            add_filename_info = config.getboolean('OUTPUT', 'add_filename_info', fallback=False)
            image_spacing = config.getfloat('PDF_SETTINGS', 'image_spacing', fallback=10)
            
            # Cấu hình số trang
            page_number_config = _get_page_number_config(config)
        else:
            quality = 90
            page_width = 297
            page_height = 210
            margins = {'left': 15, 'right': 15, 'top': 15, 'bottom': 15}
            add_page_numbers = True
            add_filename_info = False
            image_spacing = 10
            page_number_config = {
                'margin_bottom': 8,
                'font_size': 9,
                'color': (100, 100, 100)
            }
        
        # LANDSCAPE LAYOUT: 2 áº£nh má»—i trang
        images_per_page = 2
        
        successful_pages = 0
        failed_files = []
        total_pages = math.ceil(len(image_files_list) / images_per_page)
        
        # Xu ly anh theo nhom 2
        for page_idx in range(total_pages):
            try:
                start_idx = page_idx * images_per_page
                end_idx = min(start_idx + images_per_page, len(image_files_list))
                page_images = image_files_list[start_idx:end_idx]
                
                if logger:
                    logger.info(f"Trang {page_idx + 1}/{total_pages}: Xu ly {len(page_images)} anh")
                else:
                    print(f"Trang {page_idx + 1}/{total_pages}: Xu ly {len(page_images)} anh")
                
                # Them trang moi
                pdf.add_page()
                
                # Bo tri anh theo layout ngang với căn lề tùy chỉnh
                success = _create_landscape_layout_custom_margins(
                    pdf, page_images, page_width, page_height, 
                    margins, image_spacing, quality, logger
                )
                
                if success:
                    # Them thong tin trang với căn lề tùy chỉnh
                    if add_page_numbers:
                        _add_landscape_page_info_custom_margins(
                            pdf, page_idx + 1, page_width, page_height, 
                            margins, page_number_config
                        )
                    
                    successful_pages += 1
                        
            except Exception as e:
                error_msg = f"Loi khi tao trang {page_idx + 1}: {str(e)}"
                if logger:
                    logger.error(f"ERROR: {error_msg}")
                else:
                    print(f"ERROR: {error_msg}")
                continue
        
        # Luu PDF
        if successful_pages > 0:
            pdf.output(output_pdf_path)
            
            if logger:
                logger.info(f"SUCCESS: PDF da duoc tao: {output_pdf_path}")
                logger.info(f"STATS: Thanh cong: {successful_pages} trang tu {len(image_files_list)} anh")
                logger.info(f"MARGINS: Trái={margins['left']}, Phải={margins['right']}, Trên={margins['top']}, Dưới={margins['bottom']}")
            else:
                print(f"SUCCESS: PDF da duoc tao: {output_pdf_path}")
                print(f"STATS: Thanh cong: {successful_pages} trang tu {len(image_files_list)} anh")
                print(f"MARGINS: Trái={margins['left']}, Phải={margins['right']}, Trên={margins['top']}, Dưới={margins['bottom']}")
            
            if failed_files:
                print(f"\nWARNING: Cac file khong the xu ly:")
                for file_path, error in failed_files:
                    print(f"   - {file_path}: {error}")
            
            return True
        else:
            if logger:
                logger.error("ERROR: Khong co trang nao duoc tao thanh cong!")
            else:
                print("ERROR: Khong co trang nao duoc tao thanh cong!")
            return False
            
    except Exception as e:
        error_msg = f"Loi chung: {str(e)}"
        if logger:
            logger.error(f"ERROR: {error_msg}")
        else:
            print(f"ERROR: {error_msg}")
        return False

def _get_margins_config(config):
    """Lấy cấu hình căn lề từ config"""
    margins = {}
    
    # Kiểm tra xem có dùng preset không
    try:
        active_preset = config.get('MARGIN_PRESETS', 'active_preset', fallback='custom')
        
        if active_preset != 'custom' and config.has_option('MARGIN_PRESETS', f'{active_preset}_left'):
            # Dùng preset
            margins['left'] = config.getfloat('MARGIN_PRESETS', f'{active_preset}_left')
            margins['right'] = config.getfloat('MARGIN_PRESETS', f'{active_preset}_right')
            margins['top'] = config.getfloat('MARGIN_PRESETS', f'{active_preset}_top')
            margins['bottom'] = config.getfloat('MARGIN_PRESETS', f'{active_preset}_bottom')
        else:
            # Kiểm tra xem có dùng margin đồng đều không
            use_uniform = config.getboolean('PDF_SETTINGS', 'use_uniform_margin', fallback=False)
            
            if use_uniform:
                uniform_margin = config.getfloat('PDF_SETTINGS', 'uniform_margin', fallback=8)
                margins['left'] = uniform_margin
                margins['right'] = uniform_margin
                margins['top'] = uniform_margin
                margins['bottom'] = uniform_margin
            else:
                # Dùng căn lề tùy chỉnh riêng biệt
                margins['left'] = config.getfloat('PDF_SETTINGS', 'margin_left', fallback=10)
                margins['right'] = config.getfloat('PDF_SETTINGS', 'margin_right', fallback=10)
                margins['top'] = config.getfloat('PDF_SETTINGS', 'margin_top', fallback=8)
                margins['bottom'] = config.getfloat('PDF_SETTINGS', 'margin_bottom', fallback=15)
                
    except Exception:
        # Fallback về cấu hình mặc định
        margins = {'left': 10, 'right': 10, 'top': 8, 'bottom': 15}
    
    return margins

def _get_page_number_config(config):
    """Lấy cấu hình số trang"""
    try:
        return {
            'margin_bottom': config.getfloat('PDF_SETTINGS', 'page_number_margin_bottom', fallback=8),
            'font_size': config.getint('PDF_SETTINGS', 'page_number_font_size', fallback=9),
            'color': (
                config.getint('PDF_SETTINGS', 'page_number_color_r', fallback=100),
                config.getint('PDF_SETTINGS', 'page_number_color_g', fallback=100),
                config.getint('PDF_SETTINGS', 'page_number_color_b', fallback=100)
            )
        }
    except Exception:
        return {
            'margin_bottom': 8,
            'font_size': 9,
            'color': (100, 100, 100)
        }

def _create_landscape_layout_custom_margins(pdf, page_images, page_width, page_height, 
                                          margins, spacing, quality, logger=None):
    """
    Tao layout ngang voi 2 anh tren 1 trang với căn lề tùy chỉnh
    """
    
    # Vung kha dung cho anh (trừ các margin tùy chỉnh)
    available_width = page_width - margins['left'] - margins['right']
    available_height = page_height - margins['top'] - margins['bottom']
    
    # Má»—i áº£nh chiáº¿m 1/2 chiá»u rá»™ng (trá»« spacing)
    image_width = (available_width - spacing) / 2
    image_height = available_height
    
    # Xu ly va dat tung anh
    processed_count = 0
    
    for i, (img_path, rel_path) in enumerate(page_images):
        try:
            if logger:
                logger.info(f"  Processing: {rel_path}")
            
            # TÃ­nh vá»‹ trÃ­ áº£nh với căn lề tùy chỉnh
            if i == 0:  # áº¢nh bÃªn trÃ¡i
                x_pos = margins['left']
            else:  # áº¢nh bÃªn pháº£i
                x_pos = margins['left'] + image_width + spacing
            
            y_pos = margins['top']
            
            # Tao anh duoc crop va resize hoan hao
            temp_path = _create_perfect_landscape_image(img_path, image_width, image_height, quality)
            
            if temp_path:
                # Dat anh vao PDF tai vi tri chinh xac
                pdf.image(temp_path, x=x_pos, y=y_pos, w=image_width, h=image_height)
                processed_count += 1
                
                # Xoa file tam
                if os.path.exists(temp_path):
                    os.remove(temp_path)
            
        except Exception as e:
            if logger:
                logger.error(f"ERROR: Loi xu ly {rel_path}: {str(e)}")
            continue
    
    return processed_count > 0

def _create_perfect_landscape_image(image_path, target_width_mm, target_height_mm, quality):
    """Tao anh hoan hao cho layout ngang"""
    try:
        # Convert mm to pixels (300 DPI)
        dpi = 300
        target_width_px = int(target_width_mm * dpi / 25.4)
        target_height_px = int(target_height_mm * dpi / 25.4)
        target_aspect = target_width_px / target_height_px
        
        with Image.open(image_path) as img:
            # Tu dong xoay theo EXIF
            img = ImageOps.exif_transpose(img)
            
            # Convert sang RGB neu can
            if img.mode not in ['RGB', 'L']:
                if img.mode == 'RGBA':
                    background = Image.new('RGB', img.size, (255, 255, 255))
                    background.paste(img, mask=img.split()[-1])
                    img = background
                else:
                    img = img.convert('RGB')
            
            # Crop thong minh de match target aspect ratio
            img_width, img_height = img.size
            img_aspect = img_width / img_height
            
            if abs(img_aspect - target_aspect) > 0.01:  # Chi crop neu khac biet dang ke
                if img_aspect > target_aspect:
                    # Anh rong hon -> crop width (giu center)
                    new_width = int(img_height * target_aspect)
                    left = (img_width - new_width) // 2
                    img = img.crop((left, 0, left + new_width, img_height))
                else:
                    # Anh cao hon -> crop height (giu center)
                    new_height = int(img_width / target_aspect)
                    top = (img_height - new_height) // 2
                    img = img.crop((0, top, img_width, top + new_height))
            
            # Resize voi thuat toan chat luong cao
            if img.size != (target_width_px, target_height_px):
                img = img.resize((target_width_px, target_height_px), Image.Resampling.LANCZOS)
                img = img.filter(ImageFilter.UnsharpMask(radius=0.5, percent=50, threshold=3))
            
            # Tao file tam voi unique name
            temp_path = f"temp_landscape_{hash(image_path)}_{target_width_px}x{target_height_px}.jpg"
            
            # Luu voi chat luong cao va optimize
            img.save(temp_path, 'JPEG', 
                    quality=quality, 
                    optimize=True, 
                    dpi=(dpi, dpi),
                    progressive=True)
            
            return temp_path
            
    except Exception as e:
        print(f"ERROR: Loi tao anh landscape: {str(e)}")
        return None

def _add_landscape_page_info_custom_margins(pdf, page_num, page_width, page_height, 
                                          margins, page_number_config):
    """Thêm thông tin số trang với căn lề tùy chỉnh"""
    
    pdf.set_font("Arial", size=page_number_config['font_size'])
    pdf.set_text_color(*page_number_config['color'])

    # Vị trí số trang: cách đáy trang theo cấu hình
    y_position = page_height - page_number_config['margin_bottom']

    # Vẽ số trang căn giữa ngang
    pdf.set_xy(0, y_position)
    pdf.cell(page_width, 5, f"Trang {page_num}", 0, 0, 'C')

# Loại bỏ hàm print_margins_info không cần thiết