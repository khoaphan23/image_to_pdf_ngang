import os
from typing import List, Tuple

def get_all_image_files(folder_path: str) -> List[Tuple[str, str]]:
    """
    L·∫•y t·∫•t c·∫£ file ·∫£nh t·ª´ th∆∞ m·ª•c v√† c√°c th∆∞ m·ª•c con
    
    Args:
        folder_path: ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c g·ªëc
    
    Returns:
        List of tuples: (full_path, relative_path)
    """
    if not os.path.exists(folder_path):
        print(f"‚ö†Ô∏è  Th∆∞ m·ª•c '{folder_path}' kh√¥ng t·ªìn t·∫°i!")
        return []
    
    image_extensions = {'.png', '.jpg', '.jpeg', '.gif', '.bmp', '.webp', '.tiff', '.tif'}
    image_files = []
    
    # Duy·ªát qua t·∫•t c·∫£ file v√† th∆∞ m·ª•c con
    for root, dirs, files in os.walk(folder_path):
        # S·∫Øp x·∫øp th∆∞ m·ª•c v√† file ƒë·ªÉ ƒë·∫£m b·∫£o th·ª© t·ª± nh·∫•t qu√°n
        dirs.sort()
        files.sort()
        
        for file in files:
            file_ext = os.path.splitext(file)[1].lower()
            if file_ext in image_extensions:
                full_path = os.path.join(root, file)
                # T·∫°o ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi t·ª´ th∆∞ m·ª•c g·ªëc
                relative_path = os.path.relpath(full_path, folder_path)
                image_files.append((full_path, relative_path))
    
    return image_files

def get_image_files_from_folder(folder_path: str) -> List[str]:
    """
    L·∫•y danh s√°ch file ·∫£nh t·ª´ m·ªôt th∆∞ m·ª•c c·ª• th·ªÉ (kh√¥ng bao g·ªìm th∆∞ m·ª•c con)
    
    Args:
        folder_path: ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c
    
    Returns:
        List of filenames
    """
    if not os.path.exists(folder_path):
        return []
    
    image_extensions = {'.png', '.jpg', '.jpeg', '.gif', '.bmp', '.webp', '.tiff', '.tif'}
    return [f for f in os.listdir(folder_path) 
            if os.path.splitext(f)[1].lower() in image_extensions]

def sort_files_naturally(files: List[str]) -> List[str]:
    """
    S·∫Øp x·∫øp file theo th·ª© t·ª± t·ª± nhi√™n (1, 2, 10 thay v√¨ 1, 10, 2)
    """
    import re
    
    def natural_key(text):
        return [int(c) if c.isdigit() else c.lower() for c in re.split(r'(\d+)', text)]
    
    return sorted(files, key=natural_key)

def create_output_folder(output_path: str) -> bool:
    """
    T·∫°o th∆∞ m·ª•c output n·∫øu ch∆∞a t·ªìn t·∫°i
    
    Args:
        output_path: ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c output
    
    Returns:
        bool: True n·∫øu th√†nh c√¥ng ho·∫∑c ƒë√£ t·ªìn t·∫°i
    """
    try:
        if not os.path.exists(output_path):
            os.makedirs(output_path)
            print(f"üìÅ ƒê√£ t·∫°o th∆∞ m·ª•c output: {output_path}")
        return True
    except Exception as e:
        print(f"‚ùå Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c output: {e}")
        return False

def get_file_info(file_path: str) -> dict:
    """
    L·∫•y th√¥ng tin chi ti·∫øt c·ªßa file
    
    Args:
        file_path: ƒê∆∞·ªùng d·∫´n file
    
    Returns:
        dict: Th√¥ng tin file
    """
    if not os.path.exists(file_path):
        return {}
    
    stat = os.stat(file_path)
    return {
        'name': os.path.basename(file_path),
        'size': stat.st_size,
        'size_mb': round(stat.st_size / (1024 * 1024), 2),
        'modified': stat.st_mtime,
        'extension': os.path.splitext(file_path)[1].lower()
    }

def validate_image_file(file_path: str) -> Tuple[bool, str]:
    """
    Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa file ·∫£nh
    
    Args:
        file_path: ƒê∆∞·ªùng d·∫´n file
    
    Returns:
        Tuple[bool, str]: (is_valid, error_message)
    """
    try:
        if not os.path.exists(file_path):
            return False, "File kh√¥ng t·ªìn t·∫°i"
        
        if os.path.getsize(file_path) == 0:
            return False, "File r·ªóng"
        
        # Th·ª≠ m·ªü file b·∫±ng PIL
        from PIL import Image
        with Image.open(file_path) as img:
            img.verify()  # Ki·ªÉm tra t√≠nh to√†n v·∫πn
        
        return True, ""
        
    except Exception as e:
        return False, f"File kh√¥ng h·ª£p l·ªá: {str(e)}"

def clean_temp_files(directory: str = ".") -> int:
    """
    X√≥a c√°c file t·∫°m th·ªùi
    
    Args:
        directory: Th∆∞ m·ª•c c·∫ßn d·ªçn d·∫πp
    
    Returns:
        int: S·ªë file ƒë√£ x√≥a
    """
    temp_patterns = ['temp_landscape_*.jpg', 'temp_image_*.jpg', '*.tmp', '*~']
    deleted_count = 0
    
    try:
        for pattern in temp_patterns:
            import glob
            for file_path in glob.glob(os.path.join(directory, pattern)):
                try:
                    os.remove(file_path)
                    deleted_count += 1
                except:
                    pass
    except:
        pass
    
    return deleted_count